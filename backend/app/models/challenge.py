"""
Challenge and ChallengeSubmission models
Handles daily challenges, submissions, and validations
"""

import uuid
from datetime import datetime, date
from enum import Enum
from typing import List, Optional
from sqlalchemy import Column, String, DateTime, ForeignKey, Text, Boolean, Integer, Float, JSON, Enum as SQLEnum
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship, Mapped

from app.database import Base


class ChallengeType(str, Enum):
    """Types of challenges available."""
    QUIZ = "quiz"
    PHOTO = "photo"
    SPORT = "sport"
    CREATIVE = "creative"
    EXPLORATION = "exploration"
    TEAM = "team"


class ChallengeStatus(str, Enum):
    """Status of a challenge."""
    DRAFT = "draft"
    ACTIVE = "active"
    COMPLETED = "completed"
    EXPIRED = "expired"


class SubmissionStatus(str, Enum):
    """Status of a challenge submission."""
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"
    NEEDS_REVIEW = "needs_review"


class Challenge(Base):
    """
    Daily challenge model.
    Generated by AI or manually created.
    """
    __tablename__ = "challenges"

    id: Mapped[str] = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Basic info
    title: Mapped[str] = Column(String(200), nullable=False)
    description: Mapped[str] = Column(Text, nullable=False)
    type: Mapped[ChallengeType] = Column(SQLEnum(ChallengeType), nullable=False)
    
    # Challenge content
    content: Mapped[Optional[dict]] = Column(JSON, nullable=True)
    # Example for quiz: {"questions": [{"question": "...", "options": [...], "correct": 0}]}
    # Example for photo: {"target": "Take a photo of a local bird", "validation_criteria": [...]}
    # Example for sport: {"activity": "hiking", "target_distance": 5000, "target_duration": 3600}
    
    # Difficulty and scoring
    difficulty: Mapped[str] = Column(String(20), default="medium", nullable=False)  # "easy", "medium", "hard"
    base_points: Mapped[int] = Column(Integer, default=10, nullable=False)
    bonus_points: Mapped[int] = Column(Integer, default=0, nullable=False)
    
    # Challenge timing
    challenge_date: Mapped[date] = Column(DateTime, nullable=False)  # Date this challenge is for
    expires_at: Mapped[Optional[datetime]] = Column(DateTime, nullable=True)
    
    # Geographic context
    location_hint: Mapped[Optional[str]] = Column(String(200), nullable=True)
    latitude: Mapped[Optional[float]] = Column(Float, nullable=True)
    longitude: Mapped[Optional[float]] = Column(Float, nullable=True)
    
    # AI generation metadata
    ai_generated: Mapped[bool] = Column(Boolean, default=False, nullable=False)
    ai_prompt: Mapped[Optional[str]] = Column(Text, nullable=True)
    generation_context: Mapped[Optional[dict]] = Column(JSON, nullable=True)
    
    # Challenge status
    status: Mapped[ChallengeStatus] = Column(SQLEnum(ChallengeStatus), default=ChallengeStatus.DRAFT, nullable=False)
    is_team_challenge: Mapped[bool] = Column(Boolean, default=False, nullable=False)
    
    # Relationships
    season_id: Mapped[str] = Column(UUID(as_uuid=True), ForeignKey("seasons.id"), nullable=False)
    created_by: Mapped[Optional[str]] = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)  # Null if AI-generated
    
    # Timestamps
    created_at: Mapped[datetime] = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at: Mapped[datetime] = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relationships
    season: Mapped["Season"] = relationship("Season", back_populates="challenges")
    submissions: Mapped[List["ChallengeSubmission"]] = relationship("ChallengeSubmission", back_populates="challenge", cascade="all, delete-orphan")

    @property
    def is_expired(self) -> bool:
        """Check if challenge has expired."""
        if self.expires_at:
            return datetime.utcnow() > self.expires_at
        return False

    def __repr__(self):
        return f"<Challenge {self.title} ({self.type})>"


class ChallengeSubmission(Base):
    """
    User submission for a challenge.
    Contains answers, photos, or other response data.
    """
    __tablename__ = "challenge_submissions"

    id: Mapped[str] = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Foreign keys
    challenge_id: Mapped[str] = Column(UUID(as_uuid=True), ForeignKey("challenges.id"), nullable=False)
    user_id: Mapped[str] = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False)
    
    # Submission content
    submission_data: Mapped[dict] = Column(JSON, nullable=False)
    # Example for quiz: {"answers": [0, 2, 1], "time_taken": 45}
    # Example for photo: {"image_url": "...", "description": "..."}
    # Example for sport: {"distance": 5200, "duration": 3200, "gps_track": [...]}
    
    # Submission metadata
    submitted_at: Mapped[datetime] = Column(DateTime, default=datetime.utcnow, nullable=False)
    ip_address: Mapped[Optional[str]] = Column(String(45), nullable=True)
    user_agent: Mapped[Optional[str]] = Column(Text, nullable=True)
    
    # Validation and scoring
    status: Mapped[SubmissionStatus] = Column(SQLEnum(SubmissionStatus), default=SubmissionStatus.PENDING, nullable=False)
    points_awarded: Mapped[int] = Column(Integer, default=0, nullable=False)
    
    # Validation details
    validated_by: Mapped[Optional[str]] = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)
    validated_at: Mapped[Optional[datetime]] = Column(DateTime, nullable=True)
    validation_notes: Mapped[Optional[str]] = Column(Text, nullable=True)
    
    # Auto-validation for quiz/sport challenges
    auto_validated: Mapped[bool] = Column(Boolean, default=False, nullable=False)
    validation_score: Mapped[Optional[float]] = Column(Float, nullable=True)  # 0.0-1.0 confidence
    
    # Timestamps
    created_at: Mapped[datetime] = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at: Mapped[datetime] = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relationships
    challenge: Mapped["Challenge"] = relationship("Challenge", back_populates="submissions")
    user: Mapped["User"] = relationship("User", back_populates="challenge_submissions", foreign_keys=[user_id])

    def __repr__(self):
        return f"<ChallengeSubmission {self.user_id} for {self.challenge_id}>"
