# Makefile pour l'application Vacances Gamifi√©es - Tests BDD
# Usage: make [target]

.PHONY: help install test test-smoke test-auth test-ui test-api test-staging test-parallel clean reports

# Variables par d√©faut
PYTHON := python3
PIP := pip3
BDD_DIR := bdd
REPORTS_DIR := reports

# Couleurs pour l'affichage
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

# Aide par d√©faut
help: ## Afficher cette aide
	@echo -e "$(BLUE)üß™ Tests BDD - Application Vacances Gamifi√©es$(NC)"
	@echo ""
	@echo "Targets disponibles:"
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*##/ { printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
	@echo ""
	@echo "Exemples:"
	@echo "  make install     # Installer les d√©pendances"
	@echo "  make test-smoke  # Tests critiques rapides"
	@echo "  make test-ui     # Tests d'interface uniquement"
	@echo "  make reports     # G√©n√©rer tous les rapports"

# Installation
install: ## Installer les d√©pendances BDD
	@echo -e "$(BLUE)üì¶ Installation des d√©pendances BDD...$(NC)"
	cd $(BDD_DIR) && $(PIP) install -r requirements.txt
	@echo -e "$(GREEN)‚úÖ Installation termin√©e$(NC)"

install-dev: ## Installer les d√©pendances de d√©veloppement
	@echo -e "$(BLUE)üì¶ Installation compl√®te (dev + BDD)...$(NC)"
	$(PIP) install -r requirements-dev.txt || echo "requirements-dev.txt non trouv√©"
	cd $(BDD_DIR) && $(PIP) install -r requirements.txt
	@echo -e "$(GREEN)‚úÖ Installation d√©veloppement termin√©e$(NC)"

# Tests rapides
test-smoke: ## Ex√©cuter les tests de smoke (critiques uniquement)
	@echo -e "$(BLUE)üöÄ Tests de smoke...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @smoke

test-quick: ## Tests rapides sans interface graphique
	@echo -e "$(BLUE)‚ö° Tests rapides...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @smoke,@api --headless true

# Tests par fonctionnalit√©
test-auth: ## Tests d'authentification
	@echo -e "$(BLUE)üîê Tests d'authentification...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @authentication

test-profile: ## Tests de gestion des profils
	@echo -e "$(BLUE)üë§ Tests de profils...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @profile

test-season: ## Tests de gestion des saisons
	@echo -e "$(BLUE)üìÖ Tests de saisons...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @season

test-challenges: ## Tests des d√©fis quotidiens
	@echo -e "$(BLUE)üéØ Tests de d√©fis...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @challenges

test-scoring: ## Tests du syst√®me de scoring
	@echo -e "$(BLUE)üèÜ Tests de scoring...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @scoring

test-ui: ## Tests d'interface utilisateur
	@echo -e "$(BLUE)üì± Tests d'interface...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @ui --headless false

test-ai: ## Tests de g√©n√©ration de contenu IA
	@echo -e "$(BLUE)ü§ñ Tests IA...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @ai

# Tests par environnement
test: ## Ex√©cuter tous les tests (environnement dev)
	@echo -e "$(BLUE)üß™ Tests complets - Environnement dev...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --env dev

test-dev: ## Tests sur environnement de d√©veloppement
	@echo -e "$(BLUE)üîß Tests d√©veloppement...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --env dev --headless false

test-staging: ## Tests sur environnement de staging
	@echo -e "$(BLUE)üé≠ Tests staging...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --env staging --tags @smoke,@api

test-prod: ## Tests en lecture seule sur production
	@echo -e "$(BLUE)üè≠ Tests production (lecture seule)...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --env prod --tags @prod_safe

# Tests parall√®les et performance
test-parallel: ## Ex√©cuter les tests en parall√®le
	@echo -e "$(BLUE)üöÄ Tests parall√®les...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --parallel --tags @smoke,@api

test-performance: ## Tests de performance
	@echo -e "$(BLUE)‚ö° Tests de performance...$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @performance --parallel

# Rapports
reports: ## G√©n√©rer tous les rapports de tests
	@echo -e "$(BLUE)üìä G√©n√©ration des rapports...$(NC)"
	mkdir -p $(REPORTS_DIR)
	cd $(BDD_DIR) && ./run_bdd_tests.sh --format html --tags @smoke
	@echo -e "$(GREEN)üìÑ Rapport HTML: $(REPORTS_DIR)/behave_report.html$(NC)"

reports-full: ## G√©n√©rer des rapports complets avec tous les tests
	@echo -e "$(BLUE)üìà Rapports complets...$(NC)"
	mkdir -p $(REPORTS_DIR)
	cd $(BDD_DIR) && ./run_bdd_tests.sh --format html
	@echo -e "$(GREEN)üìÑ Rapport complet: $(REPORTS_DIR)/behave_report.html$(NC)"

reports-allure: ## G√©n√©rer des rapports Allure (avanc√©s)
	@echo -e "$(BLUE)üìã Rapports Allure...$(NC)"
	mkdir -p $(REPORTS_DIR)/allure-results
	cd $(BDD_DIR) && behave -f allure_behave.formatter:AllureFormatter -o ../$(REPORTS_DIR)/allure-results
	allure serve $(REPORTS_DIR)/allure-results

# Nettoyage
clean: ## Nettoyer les fichiers de test et rapports
	@echo -e "$(BLUE)üßπ Nettoyage...$(NC)"
	rm -rf $(REPORTS_DIR)/*
	rm -rf $(BDD_DIR)/__pycache__
	rm -rf $(BDD_DIR)/.pytest_cache
	find $(BDD_DIR) -name "*.pyc" -delete
	find $(BDD_DIR) -name "*.pyo" -delete
	@echo -e "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-screenshots: ## Supprimer les captures d'√©cran
	@echo -e "$(BLUE)üóëÔ∏è  Suppression des captures d'√©cran...$(NC)"
	rm -rf $(REPORTS_DIR)/screenshots/*
	@echo -e "$(GREEN)‚úÖ Captures supprim√©es$(NC)"

# Debug et d√©veloppement
debug: ## Lancer les tests en mode debug (verbose, sans headless)
	@echo -e "$(BLUE)üîç Mode debug...$(NC)"
	cd $(BDD_DIR) && behave --verbose --no-capture --headless false features/01_authentication.feature

debug-single: ## Debug d'un seul test (sp√©cifier FEATURE=nom_du_fichier)
	@echo -e "$(BLUE)üéØ Debug test unique: $(FEATURE)$(NC)"
	cd $(BDD_DIR) && behave --verbose --no-capture --headless false features/$(FEATURE)

lint: ## V√©rifier la qualit√© du code des tests
	@echo -e "$(BLUE)üîç V√©rification du code...$(NC)"
	cd $(BDD_DIR) && flake8 steps/ --max-line-length=120
	cd $(BDD_DIR) && black --check steps/
	@echo -e "$(GREEN)‚úÖ Code v√©rifi√©$(NC)"

format: ## Formater le code des tests
	@echo -e "$(BLUE)üé® Formatage du code...$(NC)"
	cd $(BDD_DIR) && black steps/
	cd $(BDD_DIR) && isort steps/
	@echo -e "$(GREEN)‚úÖ Code format√©$(NC)"

# Validation et qualit√©
validate: ## Valider tous les fichiers features
	@echo -e "$(BLUE)‚úÖ Validation des features...$(NC)"
	cd $(BDD_DIR) && behave --dry-run
	@echo -e "$(GREEN)‚úÖ Features valides$(NC)"

# CI/CD
ci-smoke: ## Tests de smoke pour CI/CD
	@echo -e "$(BLUE)üîÑ Tests CI - Smoke$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --tags @smoke --format json --headless true

ci-full: ## Tests complets pour CI/CD
	@echo -e "$(BLUE)üîÑ Tests CI - Complets$(NC)"
	cd $(BDD_DIR) && ./run_bdd_tests.sh --format json --headless true --parallel

# Utilitaires
setup: install ## Alias pour installation
dev-setup: install-dev ## Configuration compl√®te d√©veloppement

status: ## Afficher le statut de l'environnement de test
	@echo -e "$(BLUE)üìä Statut de l'environnement de test$(NC)"
	@echo "Python: $(shell $(PYTHON) --version 2>&1)"
	@echo "Pip: $(shell $(PIP) --version 2>&1)"
	@if command -v behave >/dev/null 2>&1; then \
		echo "Behave: $(shell behave --version 2>&1)"; \
	else \
		echo -e "$(RED)Behave: Non install√©$(NC)"; \
	fi
	@if command -v chromedriver >/dev/null 2>&1; then \
		echo "ChromeDriver: Disponible"; \
	else \
		echo -e "$(YELLOW)ChromeDriver: Non trouv√© (g√©r√© automatiquement)$(NC)"; \
	fi
	@echo "R√©pertoire BDD: $(shell ls -la $(BDD_DIR) 2>/dev/null | wc -l) fichiers"
	@echo "Rapports: $(shell ls -la $(REPORTS_DIR) 2>/dev/null | wc -l) fichiers"

# Target par d√©faut
.DEFAULT_GOAL := help
