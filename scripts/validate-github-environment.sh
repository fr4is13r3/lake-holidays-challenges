#!/bin/bash

# Script de validation de l'environnement GitHub Enterprise
# Ce script v√©rifie que toutes les variables et secrets n√©cessaires sont configur√©s

set -e

ENVIRONMENT=${1:-"prod"}
echo "üîç Validation de l'environnement: $ENVIRONMENT"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

warn_result() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

echo ""
echo "üìã V√©rification des pr√©requis Azure..."

# V√©rifier Azure CLI
if command -v az &> /dev/null; then
    check_result 0 "Azure CLI install√©"
    
    # V√©rifier la connexion Azure
    if az account show &> /dev/null; then
        check_result 0 "Connect√© √† Azure"
        SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        echo "   üìå Subscription: $SUBSCRIPTION_ID"
    else
        check_result 1 "Non connect√© √† Azure"
        echo "   üí° Ex√©cutez: az login"
    fi
else
    check_result 1 "Azure CLI non install√©"
fi

echo ""
echo "üîß V√©rification des ressources Azure..."

# Variables bas√©es sur l'environnement
if [ "$ENVIRONMENT" == "prod" ]; then
    RESOURCE_GROUP="lake-holidays-prod-rg"
    AKS_CLUSTER="lake-holidays-prod-aks"
    ACR_NAME="lakeprodacr2h7yde"
    KEY_VAULT="lake-prod-kv-1xnf"
    STORAGE_ACCOUNT="lakeholidaysprodstorage"
else
    warn_result "Configuration pour l'environnement '$ENVIRONMENT' non d√©finie dans ce script"
    exit 1
fi

# V√©rifier le groupe de ressources
if az group show --name "$RESOURCE_GROUP" &> /dev/null; then
    check_result 0 "Groupe de ressources: $RESOURCE_GROUP"
else
    check_result 1 "Groupe de ressources non trouv√©: $RESOURCE_GROUP"
fi

# V√©rifier le cluster AKS
if az aks show --name "$AKS_CLUSTER" --resource-group "$RESOURCE_GROUP" &> /dev/null; then
    check_result 0 "Cluster AKS: $AKS_CLUSTER"
    
    # V√©rifier la connectivit√© kubectl
    if az aks get-credentials --name "$AKS_CLUSTER" --resource-group "$RESOURCE_GROUP" --overwrite-existing &> /dev/null; then
        if command -v kubectl &> /dev/null; then
            if kubectl cluster-info &> /dev/null; then
                check_result 0 "Connectivit√© kubectl vers AKS"
            else
                check_result 1 "√âchec de connexion kubectl"
            fi
        else
            warn_result "kubectl non install√© - impossible de v√©rifier la connectivit√©"
        fi
    fi
else
    check_result 1 "Cluster AKS non trouv√©: $AKS_CLUSTER"
fi

# V√©rifier Azure Container Registry
if az acr show --name "$ACR_NAME" &> /dev/null; then
    check_result 0 "Azure Container Registry: $ACR_NAME"
else
    check_result 1 "ACR non trouv√©: $ACR_NAME"
fi

# V√©rifier Key Vault
if az keyvault show --name "$KEY_VAULT" &> /dev/null; then
    check_result 0 "Azure Key Vault: $KEY_VAULT"
else
    check_result 1 "Key Vault non trouv√©: $KEY_VAULT"
fi

# V√©rifier Storage Account
if az storage account show --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" &> /dev/null; then
    check_result 0 "Storage Account: $STORAGE_ACCOUNT"
else
    check_result 1 "Storage Account non trouv√©: $STORAGE_ACCOUNT"
fi

echo ""
echo "üåê V√©rification des domaines..."

FRONTEND_DOMAIN="frontend-${ENVIRONMENT}.francecentral.cloudapp.azure.com"
BACKEND_DOMAIN="api-${ENVIRONMENT}.francecentral.cloudapp.azure.com"

# Test de r√©solution DNS (optionnel)
if command -v nslookup &> /dev/null; then
    if nslookup "$FRONTEND_DOMAIN" &> /dev/null; then
        check_result 0 "R√©solution DNS: $FRONTEND_DOMAIN"
    else
        warn_result "R√©solution DNS √©chou√©e: $FRONTEND_DOMAIN (normal si pas encore d√©ploy√©)"
    fi
    
    if nslookup "$BACKEND_DOMAIN" &> /dev/null; then
        check_result 0 "R√©solution DNS: $BACKEND_DOMAIN"
    else
        warn_result "R√©solution DNS √©chou√©e: $BACKEND_DOMAIN (normal si pas encore d√©ploy√©)"
    fi
else
    warn_result "nslookup non disponible - impossible de v√©rifier les domaines"
fi

echo ""
echo "üìÅ V√©rification des fichiers de configuration..."

# V√©rifier les manifests Kubernetes
K8S_DIR="k8s"
if [ -d "$K8S_DIR" ]; then
    check_result 0 "R√©pertoire k8s trouv√©"
    
    REQUIRED_MANIFESTS=(
        "00-namespace-config.yaml"
        "01-backend-deployment.yaml"
        "02-storage.yaml"
        "03-frontend-deployment.yaml"
        "04-ingress.yaml"
    )
    
    for manifest in "${REQUIRED_MANIFESTS[@]}"; do
        if [ -f "$K8S_DIR/$manifest" ]; then
            check_result 0 "Manifest K8s: $manifest"
        else
            check_result 1 "Manifest K8s manquant: $manifest"
        fi
    done
else
    check_result 1 "R√©pertoire k8s non trouv√©"
fi

# V√©rifier le workflow GitHub
if [ -f ".github/workflows/ci-cd-aks.yml" ]; then
    check_result 0 "Workflow GitHub Actions trouv√©"
else
    check_result 1 "Workflow GitHub Actions manquant"
fi

echo ""
echo "üìä R√©sum√© de la validation"
echo "Environment: $ENVIRONMENT"
echo "Resource Group: $RESOURCE_GROUP"
echo "AKS Cluster: $AKS_CLUSTER"
echo "Frontend URL: https://$FRONTEND_DOMAIN"
echo "Backend URL: https://$BACKEND_DOMAIN"

echo ""
echo "üí° Prochaines √©tapes:"
echo "1. Configurez l'environnement '$ENVIRONMENT' dans GitHub Enterprise"
echo "2. Ajoutez les variables d'environnement dans GitHub"
echo "3. V√©rifiez les secrets Azure dans GitHub"
echo "4. D√©ployez via un push sur la branche main"

echo ""
echo "‚úÖ Validation termin√©e!"
