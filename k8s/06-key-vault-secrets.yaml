# Configuration pour l'intégration avec Azure Key Vault via CSI Driver
---
# SecretProviderClass pour synchroniser les secrets depuis Key Vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: lake-holidays-secrets
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: secrets
spec:
  provider: azure
  parameters:
    # Configuration Azure Key Vault
    keyvaultName: "{{KEY_VAULT_NAME}}"
    tenantId: "{{TENANT_ID}}"
    # useVMManagedIdentity: "true"
    # Spécifier explicitement le clientId de l'identité kubelet pour éviter les conflits
    userAssignedIdentityID: "{{AKS_KUBELET_IDENTITY_CLIENT_ID}}"
    
    # Liste des secrets à synchroniser
    objects: |
      array:
        - |
          objectName: jwt-secret-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: postgres-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: redis-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: google-client-secret
          objectType: secret
          objectVersion: ""
        - |
          objectName: microsoft-client-secret
          objectType: secret
          objectVersion: ""
        - |
          objectName: openai-api-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: storage-connection-string
          objectType: secret
          objectVersion: ""
  
  # Créer un secret Kubernetes avec les valeurs du Key Vault
  secretObjects:
  - secretName: lake-holidays-secrets
    type: Opaque
    data:
    - objectName: jwt-secret-key
      key: JWT_SECRET_KEY
    # - objectName: postgres-password
    #   key: POSTGRES_PASSWORD
    # - objectName: redis-password
    #   key: REDIS_PASSWORD
    - objectName: google-client-secret
      key: GOOGLE_CLIENT_SECRET
    - objectName: microsoft-client-secret
      key: MICROSOFT_CLIENT_SECRET
    - objectName: azure-openai-api-key
      key: OPENAI_API_KEY
    - objectName: storage-connection-string
      key: AZURE_STORAGE_CONNECTION_STRING
---
# Volume pour monter les secrets via CSI Driver (optionnel, pour debug)
apiVersion: v1
kind: Pod
metadata:
  name: secrets-debug-pod
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: debug
spec:
  serviceAccountName: lake-holidays-sa
  containers:
  - name: busybox
    image: k8s.gcr.io/e2e-test-images/busybox:1.29
    command:
    - "/bin/sleep"
    - "10000"
    volumeMounts:
    - name: secrets-store
      mountPath: "/mnt/secrets-store"
      readOnly: true
  volumes:
  - name: secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: "lake-holidays-secrets"
