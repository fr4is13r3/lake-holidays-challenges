# Job pour les migrations de base de données Alembic
apiVersion: batch/v1
kind: Job
metadata:
  name: alembic-migrations-{{VERSION}}
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: migrations
    version: "{{VERSION}}"
spec:
  template:
    metadata:
      labels:
        app: lake-holidays
        component: migrations
        version: "{{VERSION}}"
    spec:
      serviceAccountName: lake-holidays-sa
      restartPolicy: Never
      nodeSelector:
        workload: application
      tolerations:
        - key: workload
          operator: Equal
          value: application
          effect: NoSchedule
      initContainers:
      # Attendre que PostgreSQL soit prêt
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          # Attendre que les secrets soient montés depuis Key Vault
          echo "Waiting for secrets to be mounted from Key Vault..."
          while [ ! -f /mnt/secrets-store/postgres-password ]; do
            echo "Waiting for postgres-password secret..."
            sleep 2
          done
          
          # Lire le mot de passe depuis le volume monté
          export PGPASSWORD=$(cat /mnt/secrets-store/postgres-password)
          echo "Testing PostgreSQL connection..."
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      containers:
      - name: alembic
        image: "{{CONTAINER_REGISTRY}}/lake-holidays-backend:{{VERSION}}"
        imagePullPolicy: Always
        command: 
        - /bin/sh
        - -c
        - |
          # Attendre que les secrets soient montés depuis Key Vault
          echo "Waiting for secrets to be mounted from Key Vault..."
          while [ ! -f /mnt/secrets-store/postgres-password ]; do
            echo "Waiting for postgres-password secret..."
            sleep 2
          done
          
          # Lire le mot de passe depuis le volume monté
          export POSTGRES_PASSWORD=$(cat /mnt/secrets-store/postgres-password)
          export DATABASE_URL="postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
          echo "Using DATABASE_URL: postgresql+asyncpg://postgres:***@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
          alembic upgrade head
        env:
        # Configuration de base de données - variables individuelles
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_DB
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_PORT
        # Variables d'environnement requises par l'application
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: ENVIRONMENT
        # - name: JWT_SECRET_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: lake-holidays-secrets
        #       key: JWT_SECRET_KEY
        # - name: REDIS_HOST
        #   valueFrom:
        #     configMapKeyRef:
        #       name: lake-holidays-config
        #       key: REDIS_HOST
        # - name: REDIS_PORT
        #   valueFrom:
        #     configMapKeyRef:
        #       name: lake-holidays-config
        #       key: REDIS_PORT
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "lake-holidays-secrets"
      # Nettoyer les jobs terminés automatiquement après 1 heure
  ttlSecondsAfterFinished: 3600
  backoffLimit: 3
