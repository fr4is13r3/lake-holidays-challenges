# Déploiement PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: postgres
    version: "{{VERSION}}"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Important pour les bases de données avec volumes persistants
  selector:
    matchLabels:
      app: lake-holidays
      component: postgres
  template:
    metadata:
      labels:
        app: lake-holidays
        component: postgres
        version: "{{VERSION}}"
    spec:
      nodeSelector:
        workload: application
      tolerations:
        - key: workload
          operator: Equal
          value: application
          effect: NoSchedule
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          defaultMode: 0755
---
# Service pour PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: postgres
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app: lake-holidays
    component: postgres
---
# ConfigMap pour les scripts d'initialisation PostgreSQL
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: postgres
data:
  init-db.sql: |
    -- Script d'initialisation de la base de données Lake Holidays Challenge
    
    -- Créer les extensions nécessaires
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Créer un utilisateur applicatif (optionnel)
    -- CREATE USER lake_holidays_app WITH PASSWORD 'secure_password';
    -- GRANT ALL PRIVILEGES ON DATABASE lake_holidays TO lake_holidays_app;
    
    -- Index pour améliorer les performances
    -- Ces index seront créés par Alembic via les migrations
    
    -- Configuration pour optimiser les performances
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    ALTER SYSTEM SET log_statement = 'mod';
    ALTER SYSTEM SET log_duration = on;
    ALTER SYSTEM SET log_min_duration_statement = 1000;
    
    SELECT pg_reload_conf();
