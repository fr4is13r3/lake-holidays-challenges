# Déploiement Backend - FastAPI avec PostgreSQL et Redis intégrés
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: backend
    version: "{{VERSION}}"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: lake-holidays
      component: backend
  template:
    metadata:
      labels:
        app: lake-holidays
        component: backend
        version: "{{VERSION}}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: lake-holidays-sa
      nodeSelector:
        workload: application
      tolerations:
        - key: workload
          operator: Equal
          value: application
          effect: NoSchedule
      containers:
      - name: backend
        image: "{{CONTAINER_REGISTRY}}/lake-holidays-backend:{{VERSION}}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        # Configuration depuis ConfigMap
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: LOG_LEVEL
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_DB
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: POSTGRES_PORT
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: REDIS_PORT
        - name: AZURE_STORAGE_ACCOUNT_NAME
          valueFrom:
            configMapKeyRef:
              name: lake-holidays-config
              key: AZURE_STORAGE_ACCOUNT_NAME
        # Secrets depuis Key Vault
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: JWT_SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: POSTGRES_PASSWORD
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: GOOGLE_CLIENT_SECRET
        - name: MICROSOFT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: MICROSOFT_CLIENT_SECRET
        - name: AZURE_STORAGE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: lake-holidays-config
              key: AZURE_STORAGE_CONNECTION_STRING
        # Configuration des ressources
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        # Probes de santé
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        # Points de montage pour uploads
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
---
# Service pour exposer le backend
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: lake-holidays-{{ENVIRONMENT}}
  labels:
    app: lake-holidays
    component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: lake-holidays
    component: backend
